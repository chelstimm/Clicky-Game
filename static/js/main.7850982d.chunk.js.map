{"version":3,"sources":["logo.svg","components/Images.js","components/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Images","_this","this","react_default","a","createElement","className","props","imagesData","map","image","key","id","src","img","alt","onClick","handleClick","React","Component","Jumbotron","score","topScore","App","state","images","data","picId","clickedTwice","shuffleImages","array","i","length","j","Math","floor","random","temp","shuffleArray","slice","clicked","setState","components_Jumbotron","components_Images","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ytBAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKC6BzBC,gMAzBF,IAAAC,EAAAC,KACL,OAEAC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAEbJ,KAAKK,MAAMC,WAAWC,IAAI,SAACC,GACvB,OAAOP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWK,IAAKD,EAAME,IACxCT,EAAAC,EAAAC,cAAA,OACAQ,IAAKH,EAAMI,IACXC,IAAI,SACJC,QAAS,WACLf,EAAKM,MAAMU,YAAYP,EAAME,mBAdpCM,IAAMC,YCeZC,mLAXP,OAEIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,yBAAiBH,KAAKK,MAAMc,MAA5B,iBAAiDnB,KAAKK,MAAMe,SAA5D,MACNnB,EAAAC,EAAAC,cAAA,8FAVQa,IAAMC,kBCqEfI,6MA/DbC,MAAQ,CACNC,OAAQC,EACRL,MAAO,EACPC,SAAU,KAEZL,YAAc,SAACU,GAOb,IANA,IAAIC,EAIAC,EAiCJ,SAAsBC,GACpB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACjBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,EAxCWQ,CAFArC,EAAKuB,MAAMC,OAAOc,SAI7BR,EAAI,EAAGA,EAAIF,EAAcG,OAAQD,IAGrCJ,IAAUE,EAAcE,GAAGnB,MAEI,IAA7BiB,EAAcE,GAAGS,SAGlBX,EAAcE,GAAGS,SAAU,EAC3BvC,EAAKwC,SAAS,CACZpB,MAAOpB,EAAKuB,MAAMH,MAAQ,EAC1BC,SAAWrB,EAAKuB,MAAMH,OAASpB,EAAKuB,MAAMF,SAAWrB,EAAKuB,MAAMF,SAAW,EAAIrB,EAAKuB,MAAMF,YAI5FM,GAAe,GAKjBA,EACF3B,EAAKwC,SAAS,CACZhB,OAAQC,EACRL,MAAO,IAGTpB,EAAKwC,SAAS,CACZhB,OAAQI,6EAed,OACE1B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqC,EAAD,CAAWrB,MAAOnB,KAAKsB,MAAMH,MAAOC,SAAUpB,KAAKsB,MAAMF,WACzDnB,EAAAC,EAAAC,cAACsC,EAAD,CAAQnC,WAAYN,KAAKsB,MAAMC,OAAQR,YAAaf,KAAKe,sBA1D7CE,aCKEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7850982d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nclass Images extends React.Component {\n\n    render() {\n        return (\n\n        <div className = \"images\">\n            <div className = \"row\">\n            {\n                this.props.imagesData.map((image) => {\n                    return <div className=\"col-md-3\" key={image.id}>\n                        <img\n                        src={image.img}\n                        alt=\"states\"\n                        onClick={() => {\n                            this.props.handleClick(image.id)\n                        }}>\n                        </img>\n                    </div>\n                })\n            }\n            </div>\n        </div>\n\n        );\n    }\n}\n\nexport default Images;","import React from \"react\";\n\nclass Jumbotron extends React.Component {\n\n\n    render() {\n        return (\n\n            <div className = \"jumbotron\">\n                <h1>Clicky Game</h1>\n                <hr/>\n                <span><strong> Score: {this.props.score} | Top Score: {this.props.topScore} </strong></span>\n                <h5>Click on an image to earn points, but don't click on any more than once!</h5>\n            </div>\n        );\n    }\n}\nexport default Jumbotron;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Images from \"./components/Images\";\nimport Jumbotron from './components/Jumbotron';\nimport data from './data.json';\n\nclass App extends Component {\n  state = {\n    images: data,\n    score: 0,\n    topScore: 0\n  }\n  handleClick = (picId) => {\n    let clickedTwice\n    // severing the array reference with .slice()\n    let newStateArray = this.state.images.slice();\n    // shuffling array\n    let shuffleImages = shuffleArray(newStateArray);\n    // looping over array\n    for (let i = 0; i < shuffleImages.length; i++) {\n      // checking to see if the ID of our picture object matches\n      // the ID of our picture\n      if(picId === shuffleImages[i].id) {\n        // checking if it has been clicked already\n        if(shuffleImages[i].clicked === false) {\n          // if it has not, update the \"clicked\" boolean to true\n          // change state\n          shuffleImages[i].clicked = true;\n          this.setState({\n            score: this.state.score + 1,\n            topScore: (this.state.score >= this.state.topScore ? this.state.topScore + 1 : this.state.topScore)\n          });\n        } else {\n          // restart the game if clickedTwice = true;\n          clickedTwice = true;\n        }\n      }\n    }\n    // if a picture has been clicked twice, reset the game.\n    if (clickedTwice) {\n      this.setState({\n        images: data,\n        score: 0\n      });\n    } else {\n      this.setState({\n        images: shuffleImages\n      });\n    }\n\n    function shuffleArray(array) {\n      for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n      return array;\n    }\n  }\n  render() {\n  return (\n    <div>\n      <Jumbotron score={this.state.score} topScore={this.state.topScore} />\n      <Images imagesData={this.state.images} handleClick={this.handleClick} />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}